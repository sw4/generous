{
  "options": {
    "dest": "docs/app",
    "denominator": "generous",
    "example": [
      "html",
      "javascript",
      "css",
      "head"
    ],
    "sourceLink": true,
    "src": [
      "docs/data/**/*.*"
    ],
    "title": "generous",
    "sourceEditor": "plunker"
  },
  "data": [
    {
      "generous": {
        "source": "../data/generous.info",
        "line": {
          "from": 1,
          "to": 16
        }
      },
      "type": "documentation",
      "name": "About",
      "description": "Lightweight code comment parsing & API doc generation node module.\n\ngenerous was written to add comprehensive, free-form document generation as a\nseamless part of your build process.\n\nTypically code comment parsers impose a strict structure onto your code which\nmay or may not fit (e.g. the difficulties of using JSDoc to document angular,\nhence ngdocs creation). generous allows you to easily denote relationships\nbetween any two items as well as determine your own tags to be parsed. In addition,\nit allows you to use existing comment structures without too much overhead.",
      "shortName": "about",
      "id": "about",
      "example": null
    },
    {
      "generous": {
        "source": "../data/generous.info",
        "line": {
          "from": 18,
          "to": 22
        }
      },
      "type": "documentation",
      "name": "Installation & Build",
      "shortName": "installation&Build",
      "id": "installation&Build",
      "example": null,
      "children": [
        {
          "generous": {
            "source": "../data/install&build.info",
            "line": {
              "from": 3,
              "to": 11
            }
          },
          "type": "documentation",
          "name": "Installation",
          "parent": "Installation & Build",
          "description": "Install the package directly from NPM\n`npm install generous --save-dev`",
          "shortName": "installation",
          "id": "installation",
          "example": null
        },
        {
          "generous": {
            "source": "../data/install&build.info",
            "line": {
              "from": 14,
              "to": 20
            }
          },
          "type": "documentation",
          "name": "Build Options",
          "parent": "Installation & Build",
          "description": "",
          "shortName": "buildOptions",
          "id": "buildOptions",
          "example": null,
          "children": [
            {
              "generous": {
                "source": "../data/buildoptions.info",
                "line": {
                  "from": 1,
                  "to": 9
                }
              },
              "type": "documentation",
              "name": "src",
              "parent": "Build Options",
              "description": "A glob of source files to scan. Files can be of ANY type, so long as generous content\nis placed within generous comment blocks",
              "shortName": "src",
              "id": "src",
              "example": null
            },
            {
              "generous": {
                "source": "../data/buildoptions.info",
                "line": {
                  "from": 20,
                  "to": 28
                }
              },
              "type": "documentation",
              "name": "title",
              "parent": "Build Options",
              "description": "String or HTML to appear in the top left of the generous app, defaults to\n'generous'",
              "shortName": "title",
              "id": "title",
              "example": null
            },
            {
              "generous": {
                "source": "../data/buildoptions.info",
                "line": {
                  "from": 30,
                  "to": 42
                }
              },
              "type": "documentation",
              "name": "denominator",
              "parent": "Build Options",
              "description": "Denominator for comments, defaults to **generous** e.g. *@generous*\nin a source file indicates the comment should be parsed. If you have existing\ncomments targeting other document comment parsers, simply change to the term required,\ne.g. **ngdoc**, **jsdoc**. Note that in the output data json, the denominator tag will\nbe populated with the source file (relative path) being parsed as well as the 'to'\nand 'from' line numbers.",
              "shortName": "denominator",
              "id": "denominator",
              "example": null
            },
            {
              "generous": {
                "source": "../data/buildoptions.info",
                "line": {
                  "from": 44,
                  "to": 51
                }
              },
              "type": "documentation",
              "name": "template",
              "parent": "Build Options",
              "description": "String denoting a custom html docs template, see `dist/app/index.html` for example",
              "shortName": "template",
              "id": "template",
              "example": null
            },
            {
              "generous": {
                "source": "../data/buildoptions.info",
                "line": {
                  "from": 53,
                  "to": 62
                }
              },
              "type": "documentation",
              "name": "sourceLink",
              "parent": "Build Options",
              "description": "Boolean, defaults to `true` and indicates whether generated content should link back\nto its source file, and whether source browsing should be enabled within generous. This\ncan also be set for each item independently using the `@sourceLink` tag.",
              "shortName": "sourceLink",
              "id": "sourceLink",
              "example": null
            },
            {
              "generous": {
                "source": "../data/buildoptions.info",
                "line": {
                  "from": 66,
                  "to": 75
                }
              },
              "type": "documentation",
              "name": "sourceEditor",
              "parent": "Build Options",
              "description": "String denoting the 3rd party code editor to use to allow users to edit code examples,\npossible values include **plunker** (or *plnkr*), **JSFiddle** or **JSBin**. Note that any\nderivation of these with whitespace or capitals can also be used.",
              "shortName": "sourceEditor",
              "id": "sourceEditor",
              "example": null
            },
            {
              "generous": {
                "source": "../data/buildoptions.info",
                "line": {
                  "from": 11,
                  "to": 18
                }
              },
              "type": "documentation",
              "name": "dest",
              "parent": "Build Options",
              "description": "String denoting the destination folder to save generated generous application",
              "shortName": "dest",
              "id": "dest",
              "example": null
            }
          ]
        },
        {
          "generous": {
            "source": "../data/install&build.info",
            "line": {
              "from": 23,
              "to": 32
            }
          },
          "type": "documentation",
          "name": "Command line",
          "parent": "Installation & Build",
          "description": "generous can be run directly from the command line by passing\nbuild options as command line parameters.",
          "shortName": "commandLine",
          "id": "commandLine",
          "example": null
        },
        {
          "generous": {
            "source": "../data/install&build.info",
            "line": {
              "from": 36,
              "to": 61
            }
          },
          "type": "documentation",
          "name": "Grunt & Gulp",
          "parent": "Installation & Build",
          "description": "### Task Runners\n\n#### Gulp\n\n```javascript\nvar gulp = require('gulp'),\n    generous = require('generous');\ngulp.task('generous', function () {\n    generous(options); // where 'options' denotes required options\n});\n```\n\n#### Grunt\n```javascript\ngrunt.registerTask('generous', 'Grunt task to run generous', function() {\n  var generous = require('generous');\n  generous(options); // where 'options' denotes required options\n});\n```",
          "shortName": "grunt&Gulp",
          "id": "grunt&Gulp",
          "example": null
        }
      ]
    },
    {
      "generous": {
        "source": "../data/generous.info",
        "line": {
          "from": 25,
          "to": 29
        }
      },
      "type": "documentation",
      "name": "Usage",
      "shortName": "usage",
      "id": "usage",
      "example": null,
      "children": [
        {
          "generous": {
            "source": "../data/usage.info",
            "line": {
              "from": 2,
              "to": 9
            }
          },
          "type": "documentation",
          "name": "Introduction",
          "parent": "Usage",
          "description": "Out of the box generous supports a number of comment tags it can recognise and parse.",
          "shortName": "introduction",
          "id": "introduction",
          "example": null
        },
        {
          "generous": {
            "source": "../data/usage.info",
            "line": {
              "from": 15,
              "to": 22
            }
          },
          "type": "documentation",
          "name": "Tags",
          "parent": "Usage",
          "description": "Out of the box generous supports a number of comment tags it can recognise and parse.",
          "shortName": "tags",
          "id": "tags",
          "example": null,
          "children": [
            {
              "generous": {
                "source": "../data/tags.info",
                "line": {
                  "from": 1,
                  "to": 9
                }
              },
              "type": "documentation",
              "name": "@generous",
              "parent": "Tags",
              "description": "Indicates the beginning of a generous comment block for parsing\n(can be changed by setting `options.denominator`)",
              "shortName": "@Generous",
              "id": "@Generous",
              "example": null
            },
            {
              "generous": {
                "source": "../data/tags.info",
                "line": {
                  "from": 11,
                  "to": 18
                }
              },
              "type": "documentation",
              "name": "@name",
              "parent": "Tags",
              "description": "The name of the item being parsed",
              "shortName": "@Name",
              "id": "@Name",
              "example": null
            },
            {
              "generous": {
                "source": "../data/tags.info",
                "line": {
                  "from": 21,
                  "to": 29
                }
              },
              "type": "documentation",
              "name": "@type",
              "parent": "Tags",
              "description": "Denotes the type of content, can be anything. The default template\nclusters items by type when showing children of an item",
              "shortName": "@Type",
              "id": "@Type",
              "example": null
            },
            {
              "generous": {
                "source": "../data/tags.info",
                "line": {
                  "from": 32,
                  "to": 41
                }
              },
              "type": "documentation",
              "name": "@parent",
              "parent": "Tags",
              "description": "Indicates this item is the child of another, the generous application\nwill mark hierarchies as necessary, with the main menu showing up to three\nlevels- child items are listed",
              "shortName": "@Parent",
              "id": "@Parent",
              "example": null
            },
            {
              "generous": {
                "source": "../data/tags.info",
                "line": {
                  "from": 43,
                  "to": 51
                }
              },
              "type": "documentation",
              "name": "@description",
              "parent": "Tags",
              "description": "A description of the item, by default\nit can contain [markdown](http://daringfireball.net/projects/markdown/).",
              "shortName": "@Description",
              "id": "@Description",
              "example": null
            },
            {
              "generous": {
                "source": "../data/tags.info",
                "line": {
                  "from": 54,
                  "to": 63
                }
              },
              "type": "documentation",
              "name": "@sourceLink",
              "parent": "Tags",
              "description": "Whether to show the source file and lines of the item, and allow source\nbrowsing. This tag is overridden by the top level `sourceLink` build\noption.",
              "shortName": "@SourceLink",
              "id": "@SourceLink",
              "example": null
            },
            {
              "generous": {
                "source": "../data/tags.info",
                "line": {
                  "from": 65,
                  "to": 79
                }
              },
              "type": "documentation",
              "name": "@param",
              "parent": "Tags",
              "description": "Should be in the format `@param {type} name description`, the description section\ncan contain markdown. Nested parameters (up to one level) can be denoted by setting\nthe parameter name to `parent.child` where parent is the top level parameter. You\nare able to denote whether a parameter is optional by using the `=` after the\ntype designation",
              "parameters": [
                {
                  "name": "param1",
                  "description": "this is an example parameter",
                  "type": "bool",
                  "optional": true
                },
                {
                  "name": "param2",
                  "description": "this is an example parameter with children",
                  "type": "object",
                  "optional": false,
                  "properties": [
                    {
                      "name": "param1Child",
                      "description": "this is an example child parameter",
                      "type": "number",
                      "optional": false,
                      "isProperty": true
                    }
                  ]
                }
              ],
              "shortName": "@Param",
              "id": "@Param",
              "example": null
            },
            {
              "generous": {
                "source": "../data/tags.info",
                "line": {
                  "from": 81,
                  "to": 132
                }
              },
              "type": "documentation",
              "name": "@example",
              "parent": "Tags",
              "description": "Generous supports inline, live examples with links to an\neditable JSBin version, please see below for example output,\ninspect the originating source for the syntax used",
              "example": {
                "html": "\n  <generous-logo></generous-logo><span class='gen__span'>generous</span>\n",
                "javascript": "\n angular.module('example', [])\n  .directive('generousLogo', function(){\n   return{\n    restrict:'E',\n    template: \"<span class='gen__logo'>\" +\n      \"<span class='gen__logoShardGroup gen__logoShardGroup1'>\" +\n        \"<span class='gen__logoShard gen__logoShard1'></span>\" +\n        \"<span class='gen__logoShard gen__logoShard2'></span>\" +\n        \"<span class='gen__logoShard gen__logoShard3'></span>\" +\n        \"<span class='gen__logoShard gen__logoShard4'></span>\" +\n      \"</span>\" +\n    \"</span>\"\n   };\n  });\n  angular.element(document).ready(function() {\n    angular.bootstrap(document, ['example']);\n  });\n",
                "css": "\n body{\n  background:#333;\n  padding:20px;\n  color:#fff;\n  font-size:20px;\n }\n .gen__span{\n  position: relative;\n  display: inline-block;\n  top: -18px;\n  margin-left: 2px;\n  opacity: .8;\n }\n",
                "head": "\n <link rel=\"stylesheet\" href=\"css/generous.app.min.css\" />\n <script src='https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.0-beta.1/angular.min.js'></script>\n"
              },
              "shortName": "@Example",
              "id": "@Example"
            }
          ]
        }
      ]
    }
  ]
}
